<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZRoger的博客</title>
  
  <subtitle>雨水淋湿过的翅膀，才有穿越暴风雨的力量。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ZRoger95.github.io/"/>
  <updated>2019-01-21T23:31:45.616Z</updated>
  <id>http://ZRoger95.github.io/</id>
  
  <author>
    <name>ZRoger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你好,Hexo（02）</title>
    <link href="http://ZRoger95.github.io/post/17e96663.html"/>
    <id>http://ZRoger95.github.io/post/17e96663.html</id>
    <published>2018-09-08T12:37:22.000Z</published>
    <updated>2019-01-21T23:31:45.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 这里将记录关于<code>Hexo</code>一些东西。</p></blockquote><h2 id="Hexo生成blog后的文件结构"><a href="#Hexo生成blog后的文件结构" class="headerlink" title="Hexo生成blog后的文件结构"></a>Hexo生成blog后的文件结构</h2><p>使用<code>hexo init</code>初始化文件夹，并在安装好所需的依赖后。看下文件夹的结构：</p><p><img src="/post/17e96663/hexo_folders.png" alt="hexo_folders"></p><ol><li><p><code>.deploy_git</code>：是上传到<code>GitHub</code>中，如果你想添加一些额外东西的话，可以到下面的<code>public</code>文件夹中进行添加，然后在使用<code>hexo d -g</code>部署到<code>GitHub</code>中。</p></li><li><p><code>node_modules</code>：是<code>Hexo</code>运行时需要的一些依赖文件。</p></li><li><p><code>public</code>：和<code>.deploy_git</code>一样，生成的静态文件，只不过不用上传而已</p></li><li><code>scaffolds</code>：是一些模板文件。</li><li><code>source</code>：我们编辑的<code>md</code>文件就在这里，还有生成的一些分类文件夹也在这里。</li><li><code>themes</code>：存放主题文件的地方。</li><li><code>.gitigonre</code>：过滤上传的文件</li><li><code>_config.yml：</code>站点配置文件</li><li><code>db.json</code>：Hexo生成的缓存文件</li><li><code>package-lock.json</code>和<code>package.json</code>：用于安装依赖。</li></ol><h3 id="站点配置文件：-config-yml"><a href="#站点配置文件：-config-yml" class="headerlink" title="站点配置文件：_config.yml"></a>站点配置文件：_config.yml</h3><h4 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 网站标题</span><br><span class="line">subtitle: 网站副标题</span><br><span class="line">description: 网站描述，这里的作用是便于搜索引擎找到你的博客</span><br><span class="line">author: 作者</span><br><span class="line">language: 网站使用的语言</span><br><span class="line">timezone: 时区，默认是电脑使用的时区</span><br></pre></td></tr></table></figure><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: 网址</span><br><span class="line">root: 网站根目录，默认为： /</span><br><span class="line">permalink: 文章的永久链接格式，默认为： :year/:month/:day/:title/</span><br><span class="line">permalink_defaults: 永久链接中各部分的默认值</span><br></pre></td></tr></table></figure><p>注：若是把博客网站放在子目录中，比如：<code>http://yoursite.com/blog</code>，则需要将<code>root</code>改为<code>/blog/</code></p><h5 id="关于生成的链接"><a href="#关于生成的链接" class="headerlink" title="关于生成的链接"></a>关于生成的链接</h5><p>​    按照默认的生成规则，文字链接的格式是时间+文章名这样的形式。如果你的文章名是中文的话，就会造成一定程度上面的困扰，也不利于<code>SEO</code>。所以在这里推荐一个插件，修改生成规则，减少链接的层级。它就是<code>hexo-abbrlink</code>。这个插件对<code>hexo-asset-image</code>有影响，所以还是原来文章图片过多的话，还是慎用。安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>之后修改站点配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: post/:abbrlink.html </span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 # 算法</span><br><span class="line">  rep: dec # 进制</span><br></pre></td></tr></table></figure><p>重新部署后，文章链接就是如下形式的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/post/17e96663.html</span><br><span class="line">http://localhost:4000/post/17e96663.html</span><br></pre></td></tr></table></figure><p>关于<code>hexo-asset-image</code>，原本引用图片的命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![代替文字](图片名.jpg)</span><br></pre></td></tr></table></figure><p>现在需要加入生成后<code>abbrlink</code>字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![代替文字](abbrlink/图片名.jpg)</span><br></pre></td></tr></table></figure><p>如果你对这个插件比较感兴趣，可以去看下<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink的官网</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 这里将记录关于&lt;code&gt;Hexo&lt;/code&gt;一些东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hexo生成blog后的文件结构&quot;&gt;&lt;a href=&quot;#Hexo生成blog后的文件结构&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://ZRoger95.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>你好,Hexo（01）</title>
    <link href="http://ZRoger95.github.io/post/37449a21.html"/>
    <id>http://ZRoger95.github.io/post/37449a21.html</id>
    <published>2018-09-05T14:54:16.000Z</published>
    <updated>2019-01-21T15:00:48.358Z</updated>
    
    <content type="html"><![CDATA[<p>Hi,米娜桑。这里是ZRoger的博客。由<code>GitHub Page</code>和<code>Hexo</code>构成。<br>所以在这篇文章中，我记录了关于一些<code>Hexo</code>的东西。</p><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p><em>什么是Hexo</em>：</p><p>让我们看下<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方</a>的回答：<code>Hexo</code>是一个快速，简洁且高效的博客框架。<code>Hexo</code>使用<code>Markdown</code>(或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态页面。</p><p>我觉得它还是比较受欢迎，当你想记录生活中的事情，无论是琐碎的日志，技术分享，或者其他。都可以使用<code>Hexo</code>创建你的静态博客。但是在文章管理方面并不是很好，但我觉得还是可以一试的。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><blockquote><p><em>注意</em><br>目前只记录了在<code>window</code>系统下的过程。其他系统暂时没有办法涉及，以后有机会再补上。</p></blockquote><ol><li>首先需要安装好<code>Node.js</code>和<code>Git</code>，<code>Node.js</code>用于安装<code>Hexo</code>，而<code>Git</code>则用于连接我们的远程仓库，别忘了创建自己的<code>GitHub</code>账号。下面是检查系统中<code>Node.js</code>版本，使用<code>Git</code>工具打开。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>git bash</code>全局安装<code>hexo-cli</code>，为创建博客做准备。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在<code>GitHub</code>上创建对应的用户名仓库，格式：<code>github用户名.github.io</code></p></li><li><p>在本地创建文件夹<code>blog</code>,打开该文件夹后，输入<code>hexo init</code>进行初始化。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hdex init</span><br></pre></td></tr></table></figure><ol start="5"><li>安装所需依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ol start="6"><li>将<code>Hexo</code>与<code>GitHub Page</code>关联。</li></ol><p>先检查<code>Git</code>中是否有设置<code>user name</code>和<code>email</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.gitconfig</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure><p>如果没有信息，输入命令进行设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"你的名字"</span></span><br><span class="line">$ git config --global user.eamil <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>之后，再检查本地中是否存在<code>/.ssh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>接着生成密钥，用于关联到你的<code>GitHub</code>账号中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><ol start="7"><li>在连续回车3次，就生成密钥和公钥。将<code>id_rsa.pub</code>填到<code>GitHub</code>账户上。然后使用添加密钥到<code>ssh-agent</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure><p>添加生成的<code>ssh key</code>到<code>ssh-agent</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><blockquote><p>关<code>ssh-agent</code><br>是一个密钥管理器，将私钥交给<code>ssh-agent</code>保管后，其他程序需要身份验证的时候，就可以将验证的申请交给<code>ssh-agent</code>来完成。这里是解决每次<code>Hexo</code>部署新文章的时候，不需要重复输入登录名和密码。配置<code>ssh-key</code>让<code>Git</code>到<code>GitHub</code>切换自如，不用再验证身份。</p></blockquote><ol start="8"><li>测试一下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><ol start="9"><li>修改<code>blog</code>文件夹下面的<code>_config.yml</code>文件，添加远程仓库</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repository: 你的仓库的ssh</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="生成和部署文章"><a href="#生成和部署文章" class="headerlink" title="生成和部署文章"></a>生成和部署文章</h3><p><em>新建一篇文章</em></p><ol start="10"><li>在<code>git bash</code>中输入：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post 文章名字</span><br></pre></td></tr></table></figure><ol start="11"><li>在生成以及部署文章之前，需要再安装一个扩展，不然很有可能你的文章会部署失败:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="12"><li>生成静态文件，然后在本地上先看下效果</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>启动Hexo服务器，默认的端口<code>4000</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><ol start="13"><li>部署文章到服务器上，查看的地址格式：<code>github用户名.github.io</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>当然也可以简单点，直接生成并更新文章到<code>GitHub</code>上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><p>大概的流程是这样的，<code>Hexo</code>将编辑好的<code>md</code>文件生成静态<code>Web</code>文件，当然还有其他的文件，再上传到<code>GitHub</code>上，添加<code>ssh-agent</code>，方便每次部署你的文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi,米娜桑。这里是ZRoger的博客。由&lt;code&gt;GitHub Page&lt;/code&gt;和&lt;code&gt;Hexo&lt;/code&gt;构成。&lt;br&gt;所以在这篇文章中，我记录了关于一些&lt;code&gt;Hexo&lt;/code&gt;的东西。&lt;/p&gt;
&lt;h2 id=&quot;关于Hexo&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://ZRoger95.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
